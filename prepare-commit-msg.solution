#!/usr/bin/env python

import sys, os, re
from subprocess import check_output

# Collect the parameters

commit_msg_filepath = sys.argv[1]

if len(sys.argv) > 2:
    commit_type = sys.argv[2]
else:
    commit_type = ''
if len(sys.argv) > 3:
    commit_hash = sys.argv[3]
else:
    commit_hash = ''

print "prepare-commit-msg: File: %s\nType: %s\nHash: %s" % (commit_msg_filepath, commit_type, commit_hash)

# Figure out which branch we're on
branch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()
print "prepare-commit-msg: On branch '%s'" % branch

# Populate the commit message with the issue #, if there is one
if branch.startswith('exercises'):
    print "prepare-commit-msg: Oh hey, it's an exercise branch."
    result = re.match('exercises/(.*)', branch)
    exercise_name = result.group(1)

    with open(commit_msg_filepath, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write("Working on exercise %s %s" % (exercise_name.replace("_", " "), content))
if branch.startswith('feature'):
    print "prepare-commit-msg: Oh hey, it's a feature branch."
    result = re.match('feature/(.*)', branch)
    feature_name = result.group(1)

    with open(commit_msg_filepath, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write("Feature %s %s" % (feature_name.replace("_", " "), content))
if branch.startswith('bugfix'):
    print "prepare-commit-msg: Oh hey, it's a bugfix branch."
    result = re.match('bugfix/(.*)', branch)
    bugfix_name = result.group(1)

    with open(commit_msg_filepath, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write("Fix for %s %s" % (bugfix_name.replace("_", " "), content))